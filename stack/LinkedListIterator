import java.util.NoSuchElementException;

interface Collection<E> {
  public Iterator<E> iterator();
}

interface Iterator<E> {
  public boolean hasNext();
  public E next();
}

class LinkedList<E> implements Collection<E> {
  public class ListNode {
    E element;
    ListNode next;

    ListNode(E element, ListNode next) {
      this.element = element;
      this.next = next;
    }
    
    public ListNode getNext() {
      return next;
    }
    
    public E getElement() {
      return element;
    }
  }
  
  ListNode head = null;
  int size = 0;
  
  LinkedList() {}
  
  public boolean add(E item) {
    ListNode newNode = new ListNode(item, head);
    head = newNode;
    size++;
    return true;
  }
  
  public boolean remove(int index){
    if (this.size > 0){
      ListNode current = head;
      ListNode previous = null;
      
      for (int i = 0; i <index; i++) {
        previous = current;
        current = current.next;
      }
      
      previous.next = current.next;
      current.next = null;
      this.size--;
      return true;
    }
    return false;
  }
    
  public void display() {
    ListNode current = head;
    while (current != null) {
      System.out.println(current.element);
      current = current.next;
    }
  }
  
  public Iterator<E> iterator() {
    return new LinkedListIterator<E>();
  }

  class LinkedListIterator<E> implements Iterator<E> {
    public LinkedListIterator() {}
  
    public boolean hasNext() {
      ListNode current = head;
      if (current.getNext() == null){
        return false;
      } 
      return true;
    }
    
    public E next() {
      ListNode current = head;
      if (hasNext() == true) {
        current = current.getNext();
      }
      throw new NoSuchElementException();
    }
  }  
}



